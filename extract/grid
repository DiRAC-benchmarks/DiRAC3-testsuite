#!/usr/bin/env python
import argparse, csv, re

def main():

    # Parse command line arguments for list of data files and CSV output file
    parser = argparse.ArgumentParser(description="Parse the output of the Grid benchmark for performance metrics")
    parser.add_argument('files', type=argparse.FileType('r'), help='The datafiles to parse', nargs='+')
    parser.add_argument('csv',   type=argparse.FileType('w'), help='The CSV file to write')
    args = parser.parse_args()

    # Regex for parsing data files
    header_pattern = r"^Grid.*?Benchmarking (?P<name>.*?) bandwidth.*\n(?:^.*\n)*?(?P<items>(?:^Grid.*?[0-9]+\s*[0-9.e+-]+\s*[0-9.]+\s*[0-9.]+\s*[0-9.]+\s*\n)+)"
    metric_pattern = r"(?P<length>[0-9]+)\s*(?P<bytes>[0-9.e+-]+)\s*(?P<gbps>[0-9.]+)\s*(?P<gflops>[0-9.]+)\s*(?P<seconds>[0-9.]+)"
    header_regex   = re.compile( header_pattern , re.M)
    metric_regex   = re.compile( metric_pattern , re.M )

    # Data fields
    fields  = ['Benchmark','Length','Bytes','GB/s','GFlops/s','Seconds']

    # CSV file writer
    writer = csv.DictWriter(args.csv, fieldnames=fields)
    writer.writeheader()

    # Write from each data file to CSV
    for datafile in args.files:
        for entry in header_regex.findall(datafile.read()):
            for perf_data in metric_regex.findall(entry[1]):
                data = [entry[0],] + list(perf_data)
                writer.writerow({ field : value for field, value in zip(fields,data) })

if __name__ == "__main__":

    main()
